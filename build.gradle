plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.palantir.docker' version '0.25.0'
    id 'java'
}

group = 'net.fpeg.msa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR4")
}
task mytask{
    ext.apiToken = System.getenv('API_TOKEN')
    println System.getenv( 'MYENV' )
    println NEXUS_URL_TEST
}

docker {
    dependsOn bootJar
    // 镜像名称
//    name "${project.group}/${bootJar.baseName}"
    name "fpeg/msa-${rootProject.name}:${version}"
    // 将 bootJar 任务的输出内容，复制到 build/docker/dependency 下
    // build/docker/ 为 Docker 工作目录
    tag "latest" , "fpeg/msa-${rootProject.name}:latest"
    files 'Dockerfile'
//    files tasks.distTar.outputs, 'my-file.txt'
    // 后续 Dockerfile 中复制文件时，都相对这个位置进行
//    copySpec.from(tasks.bootJar.outputs.files.singleFile).into("dependency")
    copySpec.from(tasks.bootJar.outputs).into("dependency")
    // 指定 Dockerfile 的位置
    buildArgs([FILENAME: "${rootProject.name}-${version}.jar"])
    dockerfile file("Dockerfile")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}
